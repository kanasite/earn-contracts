{
  "address": "0x2f438F0bC13076d4dBF3eEbC2726F3186CeA52Cd",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_accountFactory",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldAdmin",
          "type": "address"
        }
      ],
      "name": "NewAdmin",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "newPendingAdmin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldPendingAdmin",
          "type": "address"
        }
      ],
      "name": "NewPendingAdmin",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newValue",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldValue",
          "type": "uint256"
        }
      ],
      "name": "QuestFeeChanged",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DFKAlchemist",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DFKGoldToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DFKJewelToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DFKQuest",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DFKTrainingQuest",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DFKVender",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "acceptAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "accountFactory",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "admin",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_erc20Tokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_amounts",
          "type": "uint256[]"
        }
      ],
      "name": "batchWithdrawalERC20Tokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_erc721Token",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "_tokenIds",
          "type": "uint256[]"
        }
      ],
      "name": "batchWithdrawalERC721Tokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_heroId",
          "type": "uint256"
        }
      ],
      "name": "cancelQuest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_heroId",
          "type": "uint256"
        }
      ],
      "name": "cancelTrainingQuest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_heroId",
          "type": "uint256"
        }
      ],
      "name": "completeQuest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_heroId",
          "type": "uint256"
        }
      ],
      "name": "completeTrainingQuest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_item",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_heroId",
          "type": "uint256"
        }
      ],
      "name": "craftPotion",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getAccount",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getOperators",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "hasAccount",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "miningJewelFeeRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "miningJewelFeeThreshold",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pendingAdmin",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "questFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sellItemFeeRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sellItemFeeThreshold",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_items",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_amounts",
          "type": "uint256[]"
        }
      ],
      "name": "sellToVender",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_miningJewelFeeRate",
          "type": "uint256"
        }
      ],
      "name": "setMiningJewelFeeRate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_miningJewelFeeThreshold",
          "type": "uint256"
        }
      ],
      "name": "setMiningJewelFeeThreshold",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newPendingAdmin",
          "type": "address"
        }
      ],
      "name": "setPendingAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_questFee",
          "type": "uint256"
        }
      ],
      "name": "setQuestFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_sellItemFeeRate",
          "type": "uint256"
        }
      ],
      "name": "setSellItemFeeRate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_sellItemFeeThreshold",
          "type": "uint256"
        }
      ],
      "name": "setSellItemFeeThreshold",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_trainingQuestFeeRate",
          "type": "uint256"
        }
      ],
      "name": "setTrainingQuestFeeRate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_trainingQuestFeeThreshold",
          "type": "uint256"
        }
      ],
      "name": "setTrainingQuestFeeThreshold",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "_heroIds",
          "type": "uint256[]"
        },
        {
          "internalType": "address",
          "name": "_quest",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "_attempts",
          "type": "uint8"
        }
      ],
      "name": "startQuest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "_heroIds",
          "type": "uint256[]"
        },
        {
          "internalType": "address",
          "name": "_quest",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "_attempts",
          "type": "uint8"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "uint1",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "uint2",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "uint3",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "uint4",
              "type": "uint256"
            },
            {
              "internalType": "int256",
              "name": "int1",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "int2",
              "type": "int256"
            },
            {
              "internalType": "string",
              "name": "string1",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "string2",
              "type": "string"
            },
            {
              "internalType": "address",
              "name": "address1",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "address2",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "address3",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "address4",
              "type": "address"
            }
          ],
          "internalType": "struct IDFKQuest.QuestData",
          "name": "_questData",
          "type": "tuple"
        }
      ],
      "name": "startQuestWithData",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "_heroIds",
          "type": "uint256[]"
        },
        {
          "internalType": "address",
          "name": "_quest",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "_attempts",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "_level",
          "type": "uint8"
        }
      ],
      "name": "startTrainingQuest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "trainingQuestFeeRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "trainingQuestFeeThreshold",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "tryGetAccount",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_add",
          "type": "bool"
        }
      ],
      "name": "updateOperator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawalNativeToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x0ec09de8e0abf8433832fa0d417fdc93318cda6b30c2c431c5b9ebbbcf1b0616",
  "receipt": {
    "to": null,
    "from": "0x0B1f506d4A9C0b1091bCAd24567C08fdCcaD2B64",
    "contractAddress": "0x2f438F0bC13076d4dBF3eEbC2726F3186CeA52Cd",
    "transactionIndex": 11,
    "gasUsed": "2607909",
    "logsBloom": "0x
    "blockHash": "0x93b8650d5922f3e488b5563176f45f8ca33016096fe4361a99b0e936e2e916b9",
    "transactionHash": "0x0ec09de8e0abf8433832fa0d417fdc93318cda6b30c2c431c5b9ebbbcf1b0616",
    "logs": [
      {
        "transactionIndex": 11,
        "blockNumber": 25790189,
        "transactionHash": "0x0ec09de8e0abf8433832fa0d417fdc93318cda6b30c2c431c5b9ebbbcf1b0616",
        "address": "0x2f438F0bC13076d4dBF3eEbC2726F3186CeA52Cd",
        "topics": [
          "0xf9ffabca9c8276e99321725bcb43fb076a6c66a54b7f21c4e8146d8519b417dc"
        ],
        "data": "0x0000000000000000000000000b1f506d4a9c0b1091bcad24567c08fdccad2b640000000000000000000000000000000000000000000000000000000000000000",
        "logIndex": 110,
        "blockHash": "0x93b8650d5922f3e488b5563176f45f8ca33016096fe4361a99b0e936e2e916b9"
      }
    ],
    "blockNumber": 25790189,
    "cumulativeGasUsed": "17629073",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x26B1029bD0bEEb31F2F5da74d2dd19fAC92b85Cc"
  ],
  "numDeployments": 2,
  "solcInputHash": "d02a33d4fcb6841c3dcdfb16e348e276",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_accountFactory\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldAdmin\",\"type\":\"address\"}],\"name\":\"NewAdmin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newPendingAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldPendingAdmin\",\"type\":\"address\"}],\"name\":\"NewPendingAdmin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldValue\",\"type\":\"uint256\"}],\"name\":\"QuestFeeChanged\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DFKAlchemist\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DFKGoldToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DFKJewelToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DFKQuest\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DFKTrainingQuest\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DFKVender\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"accountFactory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_erc20Tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"}],\"name\":\"batchWithdrawalERC20Tokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_erc721Token\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"batchWithdrawalERC721Tokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_heroId\",\"type\":\"uint256\"}],\"name\":\"cancelQuest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_heroId\",\"type\":\"uint256\"}],\"name\":\"cancelTrainingQuest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_heroId\",\"type\":\"uint256\"}],\"name\":\"completeQuest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_heroId\",\"type\":\"uint256\"}],\"name\":\"completeTrainingQuest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_item\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_heroId\",\"type\":\"uint256\"}],\"name\":\"craftPotion\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getAccount\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOperators\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"hasAccount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"miningJewelFeeRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"miningJewelFeeThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"questFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellItemFeeRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellItemFeeThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_items\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"}],\"name\":\"sellToVender\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_miningJewelFeeRate\",\"type\":\"uint256\"}],\"name\":\"setMiningJewelFeeRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_miningJewelFeeThreshold\",\"type\":\"uint256\"}],\"name\":\"setMiningJewelFeeThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newPendingAdmin\",\"type\":\"address\"}],\"name\":\"setPendingAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_questFee\",\"type\":\"uint256\"}],\"name\":\"setQuestFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_sellItemFeeRate\",\"type\":\"uint256\"}],\"name\":\"setSellItemFeeRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_sellItemFeeThreshold\",\"type\":\"uint256\"}],\"name\":\"setSellItemFeeThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_trainingQuestFeeRate\",\"type\":\"uint256\"}],\"name\":\"setTrainingQuestFeeRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_trainingQuestFeeThreshold\",\"type\":\"uint256\"}],\"name\":\"setTrainingQuestFeeThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_heroIds\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"_quest\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"_attempts\",\"type\":\"uint8\"}],\"name\":\"startQuest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_heroIds\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"_quest\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"_attempts\",\"type\":\"uint8\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"uint1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"uint2\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"uint3\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"uint4\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"int1\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"int2\",\"type\":\"int256\"},{\"internalType\":\"string\",\"name\":\"string1\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"string2\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"address1\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"address2\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"address3\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"address4\",\"type\":\"address\"}],\"internalType\":\"struct IDFKQuest.QuestData\",\"name\":\"_questData\",\"type\":\"tuple\"}],\"name\":\"startQuestWithData\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_heroIds\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"_quest\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"_attempts\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_level\",\"type\":\"uint8\"}],\"name\":\"startTrainingQuest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"trainingQuestFeeRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"trainingQuestFeeThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"tryGetAccount\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_add\",\"type\":\"bool\"}],\"name\":\"updateOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawalNativeToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/AutoQuest.sol\":\"AutoQuest\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbbc8ac883ac3c0078ce5ad3e288fbb3ffcc8a30c3a98c0fda0114d64fc44fca2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits a {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x11b84bb56dc112a6590bfe3e0efa118aa1b5891132342200d04c4ef544cb93de\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x516a22876c1fab47f49b1bc22b4614491cd05338af8bd2e7b382da090a079990\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xd5fa74b4fb323776fa4a8158800fec9d5ac0fec0d6dd046dd93798632ada265f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/structs/EnumerableSet.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastvalue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastvalue;\\n                // Update the index for the moved value\\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x9772845c886f87a3aab315f8d6b68aa599027c20f441b131cd4afaf65b588900\",\"license\":\"MIT\"},\"contracts/AutoQuest.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./DFKEarnBase.sol\\\";\\nimport \\\"./interfaces/IDFKQuest.sol\\\";\\n\\ncontract AutoQuest is DFKEarnBase {\\n    address public constant DFKQuest = 0x5100Bd31b822371108A0f63DCFb6594b9919Eaf4;\\n    address public constant DFKTrainingQuest = 0xAa9a289ce0565E4D6548e63a441e7C084E6B52F6;\\n    address public constant DFKJewelToken = 0x72Cb10C6bfA5624dD07Ef608027E366bd690048F;\\n    address public constant DFKGoldToken = 0x3a4EDcf3312f44EF027acfd8c21382a5259936e7;\\n    address public constant DFKVender = 0xe53BF78F8b99B6d356F93F41aFB9951168cca2c6;\\n    address public constant DFKAlchemist = 0x38e76972BD173901B5E5E43BA5cB464293B80C31;\\n\\n\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n    EnumerableSet.AddressSet private operators;\\n\\n    uint public questFee;\\n    uint public miningJewelFeeRate;\\n    uint public miningJewelFeeThreshold;\\n    uint public trainingQuestFeeRate;\\n    uint public trainingQuestFeeThreshold;\\n    uint public sellItemFeeRate;\\n    uint public sellItemFeeThreshold;\\n\\n    event QuestFeeChanged(uint256 newValue, uint256 oldValue);\\n\\n    constructor(address _accountFactory) DFKEarnBase(_accountFactory) {\\n        questFee = 0.12 ether;\\n        miningJewelFeeRate = 250;           // in bps\\n        miningJewelFeeThreshold = 0.25e18;  // 0.25 jewel\\n        trainingQuestFeeRate = 250;         // in bps\\n        trainingQuestFeeThreshold = 200e3;  // 200 gold\\n        sellItemFeeRate = 250;              // in bps\\n        sellItemFeeThreshold = 200e3;       // 200 gold\\n    }\\n\\n    modifier onlyOperator() {\\n        require(operators.contains(msg.sender), \\\"DFKEarn: not operator\\\");\\n        _;\\n    }\\n\\n    function startQuest(\\n        address _account,\\n        uint256[] calldata _heroIds,\\n        address _quest,\\n        uint8 _attempts\\n    ) \\n        external\\n        onlyOperator\\n    {\\n        chargeQuestFee(_account, _heroIds.length);\\n        IAccount(_account).functionCall(DFKQuest, abi.encodeWithSignature(\\n            \\\"startQuest(uint256[],address,uint8)\\\",\\n            _heroIds,\\n            _quest,\\n            _attempts\\n        ));\\n    }\\n\\n    function startQuestWithData(\\n        address _account,\\n        uint256[] calldata _heroIds,\\n        address _quest,\\n        uint8 _attempts,\\n        IDFKQuest.QuestData calldata _questData\\n    )\\n        external\\n        onlyOperator\\n    {\\n        chargeQuestFee(_account, _heroIds.length);\\n        IAccount(_account).functionCall(DFKQuest, abi.encodeWithSignature(\\n            \\\"startQuestWithData(uint256[],address,uint8,(uint256,uint256,uint256,uint256,int256,int256,string,string,address,address,address,address))\\\",\\n            _heroIds,\\n            _quest,\\n            _attempts,\\n            _questData\\n        ));\\n    }\\n\\n    function cancelQuest(address _account, uint256 _heroId) external onlyOperator {\\n        IAccount(_account).functionCall(DFKQuest, abi.encodeWithSignature(\\n            \\\"cancelQuest(uint256)\\\",\\n            _heroId\\n        ));\\n    }\\n\\n    function completeQuest(address _account, uint256 _heroId) external onlyOperator {\\n        uint256 oldBalance = IERC20(DFKJewelToken).balanceOf(_account);\\n        IAccount(_account).functionCall(DFKQuest, abi.encodeWithSignature(\\n            \\\"completeQuest(uint256)\\\",\\n            _heroId\\n        ));\\n        uint256 newBalance = IERC20(DFKJewelToken).balanceOf(_account);\\n        chargeEarnings(\\n            _account,\\n            DFKJewelToken,\\n            newBalance - oldBalance,\\n            miningJewelFeeThreshold,\\n            miningJewelFeeRate\\n        );\\n    }\\n\\n    function startTrainingQuest(\\n        address _account,\\n        uint256[] calldata _heroIds,\\n        address _quest,\\n        uint8 _attempts,\\n        uint8 _level\\n    ) \\n        external\\n        onlyOperator\\n    {\\n        chargeQuestFee(_account, _heroIds.length);\\n        IAccount(_account).functionCall(DFKTrainingQuest, abi.encodeWithSignature(\\n            \\\"startQuest(uint256[],address,uint8,uint8)\\\",\\n            _heroIds,\\n            _quest,\\n            _attempts,\\n            _level\\n        ));\\n    }\\n\\n    function cancelTrainingQuest(address _account, uint256 _heroId) external onlyOperator {\\n        IAccount(_account).functionCall(DFKTrainingQuest, abi.encodeWithSignature(\\n            \\\"cancelQuest(uint256)\\\",\\n            _heroId\\n        ));\\n    }\\n\\n    function completeTrainingQuest(address _account, uint256 _heroId) external onlyOperator {\\n        uint256 oldBalance = IERC20(DFKGoldToken).balanceOf(_account);\\n        IAccount(_account).functionCall(DFKTrainingQuest, abi.encodeWithSignature(\\n            \\\"completeQuest(uint256)\\\",\\n            _heroId\\n        ));\\n        uint256 newBalance = IERC20(DFKGoldToken).balanceOf(_account);\\n        chargeEarnings(\\n            _account,\\n            DFKGoldToken,\\n            newBalance - oldBalance,\\n            trainingQuestFeeThreshold,\\n            trainingQuestFeeRate\\n        );\\n    }\\n\\n    function craftPotion(address _account, address _item, uint256 _heroId) external onlyOperator {\\n        IAccount(_account).functionCall(DFKAlchemist, abi.encodeWithSignature(\\n            \\\"consumeItem(address,uint256)\\\",\\n            _item,\\n            _heroId\\n        ));\\n    }\\n\\n    function sellToVender(address[] calldata _items, uint[] calldata _amounts) external {\\n        address account = getAccount(msg.sender);\\n        uint256 oldBalance = IERC20(DFKGoldToken).balanceOf(account);\\n        for (uint i = 0; i < _items.length; i++) {\\n            uint balance = IERC20(_items[i]).balanceOf(account);\\n            require(_amounts[i] <= balance, \\\"DFKEarn: insufficient balance\\\");\\n            IAccount(account).functionCall(_items[i], abi.encodeWithSignature(\\n                \\\"approve(address,uint256)\\\",\\n                DFKVender,\\n                _amounts[i]\\n            ));\\n            IAccount(account).functionCall(DFKVender, abi.encodeWithSelector(\\n                bytes4(0x096c5e1a),\\n                _items[i],\\n                _amounts[i]\\n            ));\\n        }\\n        uint256 newBalance = IERC20(DFKGoldToken).balanceOf(account);\\n        chargeEarnings(\\n            account,\\n            DFKGoldToken,\\n            newBalance - oldBalance,\\n            sellItemFeeThreshold,\\n            sellItemFeeRate\\n        );\\n    }\\n\\n    function chargeQuestFee(\\n        address _account,\\n        uint _heroCount\\n    )\\n        private\\n    {\\n        uint256 totalQuestFee = _heroCount * questFee;\\n        require(_account.balance >= totalQuestFee, \\\"AutoQuest: insufficent balance\\\");\\n        IAccount(_account).sendValue(payable(admin), totalQuestFee);\\n    }\\n\\n    function chargeEarnings(\\n        address account,\\n        address token,\\n        uint earnings,\\n        uint threshold,\\n        uint feeRate\\n    )\\n        private\\n    {\\n        if (earnings >= threshold) {\\n            uint256 fee = earnings * feeRate / 10000;\\n            IAccount(account).functionCall(token, abi.encodeWithSignature(\\n                \\\"transfer(address,uint256)\\\",\\n                admin,\\n                fee\\n            ));\\n        }\\n    }\\n\\n    function setQuestFee(uint256 _questFee) external onlyAdmin {\\n        uint256 oldValue = questFee;\\n        questFee = _questFee;\\n        emit QuestFeeChanged(questFee, oldValue);\\n    }\\n\\n    function setMiningJewelFeeRate(uint256 _miningJewelFeeRate) external onlyAdmin {\\n        miningJewelFeeRate = _miningJewelFeeRate;\\n    }\\n\\n    function setMiningJewelFeeThreshold(uint256 _miningJewelFeeThreshold) external onlyAdmin {\\n        miningJewelFeeThreshold = _miningJewelFeeThreshold;\\n    }\\n\\n    function setTrainingQuestFeeRate(uint256 _trainingQuestFeeRate) external onlyAdmin {\\n        trainingQuestFeeRate = _trainingQuestFeeRate;\\n    }\\n\\n    function setTrainingQuestFeeThreshold(uint256 _trainingQuestFeeThreshold) external onlyAdmin {\\n        trainingQuestFeeThreshold = _trainingQuestFeeThreshold;\\n    }\\n\\n    function setSellItemFeeRate(uint256 _sellItemFeeRate) external onlyAdmin {\\n        sellItemFeeRate = _sellItemFeeRate;\\n    }\\n\\n    function setSellItemFeeThreshold(uint256 _sellItemFeeThreshold) external onlyAdmin {\\n        sellItemFeeThreshold = _sellItemFeeThreshold;\\n    }\\n\\n    function updateOperator(address _operator, bool _add) external onlyAdmin {\\n        if (_add) {\\n            operators.add(_operator);\\n        } else {\\n            operators.remove(_operator);\\n        }\\n    }\\n\\n    function getOperators() public view returns (address[] memory) {\\n        uint length = operators.length();\\n        address[] memory result = new address[](length);\\n        for (uint i = 0; i < length; i++) {\\n            result[i] = operators.at(i);\\n        }\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x526a9013f581af1617b2fd010473954cf84405a99eba5416e04b0c392e968b35\",\"license\":\"MIT\"},\"contracts/DFKEarnBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\nimport \\\"./interfaces/IAccount.sol\\\";\\nimport \\\"./interfaces/IAccountFactory.sol\\\";\\n\\ncontract DFKEarnBase {\\n    address public admin;\\n    address public pendingAdmin;\\n\\n    address public immutable accountFactory;\\n\\n    event NewAdmin(address newAdmin, address oldAdmin);\\n    event NewPendingAdmin(address newPendingAdmin, address oldPendingAdmin);\\n\\n    constructor(address _accountFacotry) {\\n        admin = msg.sender;\\n        emit NewAdmin(admin, address(0));\\n        accountFactory = _accountFacotry;\\n    }\\n\\n    modifier onlyAdmin() {\\n        require(msg.sender == admin, \\\"DFKEarn: not admin\\\");\\n        _;\\n    }\\n\\n    function withdrawalNativeToken(uint256 _amount) external {\\n        address account = getAccount(msg.sender);\\n        require(_amount <= account.balance, \\\"DFKEarn: insufficient balance\\\");\\n        IAccount(account).sendValue(payable(msg.sender), _amount);\\n    }\\n\\n    function batchWithdrawalERC20Tokens(\\n        address[] calldata _erc20Tokens,\\n        uint256[] calldata _amounts\\n    )\\n        external\\n    {\\n        address account = getAccount(msg.sender);\\n        for (uint i = 0; i < _erc20Tokens.length; i++) {\\n            uint256 balance = IERC20(_erc20Tokens[i]).balanceOf(address(account));\\n            require(_amounts[i] <= balance, \\\"DFKEarn: insufficient balance\\\");\\n            IAccount(account).functionCall(_erc20Tokens[i], abi.encodeWithSignature(\\n                \\\"transfer(address,uint256)\\\",\\n                msg.sender,\\n                _amounts[i]\\n            ));\\n        }\\n    }\\n\\n    function batchWithdrawalERC721Tokens(\\n        address _erc721Token,\\n        uint256[] calldata _tokenIds\\n    )\\n        external\\n    {\\n        address account = getAccount(msg.sender);\\n        for (uint i = 0; i < _tokenIds.length; i++) {\\n            address owner = IERC721(_erc721Token).ownerOf(_tokenIds[i]);\\n            require(owner == account, \\\"DFKEarn: not owner\\\");\\n            IAccount(account).functionCall(_erc721Token, abi.encodeWithSignature(\\n                \\\"safeTransferFrom(address,address,uint256)\\\",\\n                account,\\n                msg.sender,\\n                _tokenIds[i]\\n            ));\\n        }\\n    }\\n\\n    function setPendingAdmin(address _newPendingAdmin) external onlyAdmin {\\n        require(\\n            _newPendingAdmin != admin && _newPendingAdmin != address(0),\\n            \\\"DFKEarn: invalid address\\\"\\n        );\\n        if (pendingAdmin != _newPendingAdmin) {\\n            address oldPendingAdmin = pendingAdmin;\\n            pendingAdmin = _newPendingAdmin;\\n            emit NewPendingAdmin(pendingAdmin, oldPendingAdmin);\\n        }\\n    }\\n\\n    function acceptAdmin() external {\\n        require(\\n            msg.sender == pendingAdmin && msg.sender != address(0),\\n            \\\"DFKEarn: not pending admin\\\"\\n        );\\n        address oldAdmin = admin;\\n        address oldPendingAdmin = pendingAdmin;\\n        admin = pendingAdmin;\\n        pendingAdmin = address(0);\\n        emit NewAdmin(admin, oldAdmin);\\n        emit NewPendingAdmin(pendingAdmin, oldPendingAdmin);\\n    }\\n\\n    function tryGetAccount(address user) public view returns (address) {\\n        return IAccountFactory(accountFactory).accounts(user);\\n    }\\n\\n    function getAccount(address user) public view returns (address) {\\n        address account = tryGetAccount(user);\\n        require(account != address(0), \\\"DFKEarn: no account\\\");\\n        return account;\\n    }\\n\\n    function hasAccount(address user) public view returns (bool) {\\n        return tryGetAccount(user) != address(0);\\n    }\\n}\\n\",\"keccak256\":\"0x3b1d2cdafc974df51241873db53575a071c5cf270f2734766256e0b880e2f6da\",\"license\":\"MIT\"},\"contracts/interfaces/IAccount.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IAccount {\\n    event Received(address indexed sender, uint value);\\n    event WhitelistAdded(address indexed _address);\\n    event WhitelistRemoved(address indexed _address);\\n\\n    function factory() external view returns (address);\\n    function owner() external view returns (address);\\n    function sendValue(address payable _recipient, uint256 _amount) external payable;\\n    function functionCall(address _target, bytes memory _data) external payable returns (bytes memory result);\\n    function functionCallWithValue(address _target, bytes memory _data, uint _value) external payable returns (bytes memory result);\\n    function isWhitelisted(address _address) external view returns(bool);\\n    function getWhitelist() external view returns (address[] memory);\\n    function updateWhitelist(address[] memory _toAdd, address[] memory _toRemove) external;\\n    function addToWhitelist(address[] memory _toAdd) external;\\n    function removeFromWhitelist(address[] memory _toRemove) external;\\n}\\n\",\"keccak256\":\"0x71357dc506ed95791dd43420f32bb07290a49462d2fa5f3692a2708bffc9f997\",\"license\":\"MIT\"},\"contracts/interfaces/IAccountFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IAccountFactory {\\n    event AccountCreated(\\n        address indexed creator,\\n        address indexed account,\\n        uint index\\n    );\\n\\n    function accounts(address creator) external view returns (address account);\\n    function creators(uint256 index) external view returns (address creator);\\n    function total() external view returns (uint256);\\n    function createAccount() external payable returns (address account);\\n    function createAccountWithWhitelist(address[] memory whitelist) external payable returns (address account);\\n    function hasAccount(address creator) external view returns (bool);\\n}\",\"keccak256\":\"0x3bcafde7d58fa5779e3ba6452ec259134d71c035b0ffd52ffd5c8dd0ad936356\",\"license\":\"MIT\"},\"contracts/interfaces/IDFKQuest.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IDFKQuest {\\n    struct QuestData {\\n        uint256 uint1;\\n        uint256 uint2;\\n        uint256 uint3;\\n        uint256 uint4;\\n        int256 int1;\\n        int256 int2;\\n        string string1;\\n        string string2;\\n        address address1;\\n        address address2;\\n        address address3;\\n        address address4;\\n    }\\n\\n    function startQuest(uint256[] calldata _heroIds, address _quest, uint8 _attempts) external;\\n    function startQuestWithData(uint256[] calldata _heroIds, address _quest, uint8 _attempts, QuestData calldata _questData) external;\\n    function cancelQuest(uint256 _heroId) external;\\n    function completeQuest(uint256 _heroId) external;\\n}\",\"keccak256\":\"0x99db9e993844ea8894766c2ffb5212dee80245fb9016ae48ee69c8271b591241\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b5060405162002c6038038062002c608339810160408190526200003491620000d1565b600080546001600160a01b03191633908117825560408051918252602082019290925282917ff9ffabca9c8276e99321725bcb43fb076a6c66a54b7f21c4e8146d8519b417dc910160405180910390a160601b6001600160601b031916608052506701aa535d3d0c000060045560fa60058190556703782dace9d90000600655600781905562030d406008819055600991909155600a5562000103565b600060208284031215620000e457600080fd5b81516001600160a01b0381168114620000fc57600080fd5b9392505050565b60805160601c612b3762000129600039600081816103f8015261085f0152612b376000f3fe608060405234801561001057600080fd5b506004361061025d5760003560e01c8063687cd9c111610146578063c8e40fbf116100c3578063f243fbff11610087578063f243fbff14610542578063f476f58614610555578063f567a69314610570578063f851a44014610579578063f9d2fc641461058c578063fbcbc0f11461059f57600080fd5b8063c8e40fbf146104cb578063d0d822e3146104ee578063d11d2c3114610501578063eba53f7d1461051c578063f05ba4fe1461052f57600080fd5b8063916e36071161010a578063916e360714610466578063b383544714610481578063b5a143d014610494578063b6644ab5146104a7578063b8de0547146104b057600080fd5b8063687cd9c1146103f35780636d44a3b21461041a5780637a5cadd01461042d57806388fd6cbd146104405780638f3c4e5b1461045357600080fd5b80632d6b7fcb116101df5780634dd18bf5116101a35780634dd18bf51461038d578063518911bc146103a0578063618f71ab146103b35780636374e4c5146103bc5780636773ed1e146103d757806367dfa3e7146103ea57600080fd5b80632d6b7fcb146103425780632eaa60531461034b5780633760da5a1461035e5780633a6cb96e146103715780633a9a57721461037a57600080fd5b80631cc1b0e1116102265780631cc1b0e1146102e15780631f77a06a146102f4578063267822471461030757806327a099d81461031a5780632c3f00c91461032f57600080fd5b8062c49388146102625780630e18b6811461029a5780630e197865146102a45780630f6672e5146102b7578063176285aa146102ca575b600080fd5b61027d7372cb10c6bfa5624dd07ef608027e366bd690048f81565b6040516001600160a01b0390911681526020015b60405180910390f35b6102a26105b2565b005b6102a26102b236600461265a565b6106d2565b6102a26102c5366004612515565b61073a565b6102d360075481565b604051908152602001610291565b61027d6102ef36600461225d565b61083d565b6102a2610302366004612515565b6108e1565b60015461027d906001600160a01b031681565b61032261093f565b604051610291919061272d565b6102a261033d36600461244f565b6109ef565b6102d360085481565b6102a26103593660046122d8565b610b06565b6102a261036c366004612541565b610d1a565b6102d360065481565b6102a261038836600461265a565b610f3a565b6102a261039b36600461225d565b610f69565b6102a26103ae36600461265a565b611075565b6102d3600a5481565b61027d73aa9a289ce0565e4d6548e63a441e7c084e6b52f681565b6102a26103e5366004612515565b6110a4565b6102d360045481565b61027d7f000000000000000000000000000000000000000000000000000000000000000081565b6102a26104283660046124d7565b6112f7565b6102a261043b36600461265a565b61133d565b6102a261044e3660046123a6565b6113d0565b6102a261046136600461265a565b611488565b61027d733a4edcf3312f44ef027acfd8c21382a5259936e781565b6102a261048f366004612541565b6114b7565b6102a26104a236600461265a565b611959565b6102d360095481565b61027d735100bd31b822371108a0f63dcfb6594b9919eaf481565b6104de6104d936600461225d565b611988565b6040519015158152602001610291565b6102a26104fc36600461265a565b6119a5565b61027d7338e76972bd173901b5e5e43ba5cb464293b80c3181565b6102a261052a366004612515565b6119d4565b6102a261053d36600461265a565b611c21565b6102a261055036600461232d565b611c50565b61027d73e53bf78f8b99b6d356f93f41afb9951168cca2c681565b6102d360055481565b60005461027d906001600160a01b031681565b6102a261059a366004612297565b611d5c565b61027d6105ad36600461225d565b611e5f565b6001546001600160a01b0316331480156105cb57503315155b61061c5760405162461bcd60e51b815260206004820152601a60248201527f44464b4561726e3a206e6f742070656e64696e672061646d696e00000000000060448201526064015b60405180910390fd5b60008054600180546001600160a01b038082166001600160a01b031980861682179096559490911690915560408051848152919092166020820181905292917ff9ffabca9c8276e99321725bcb43fb076a6c66a54b7f21c4e8146d8519b417dc910160405180910390a1600154604080516001600160a01b03928316815291831660208301527fca4f2f25d0898edd99413412fb94012f9e54ec8142f9b093e7720646a95b16a991015b60405180910390a15050565b6000546001600160a01b031633146106fc5760405162461bcd60e51b81526004016106139061291d565b600480549082905560408051838152602081018390527f95ed68237a6a1d4200ec409bb080ba6295f2a426346b3d475f4bf3a412cc30be91016106c6565b610745600233611eb9565b6107615760405162461bcd60e51b815260040161061390612949565b816001600160a01b031663a0b5ffb073aa9a289ce0565e4d6548e63a441e7c084e6b52f68360405160240161079891815260200190565b60408051601f198184030181529181526020820180516001600160e01b031663fe90ff7d60e01b1790525160e084901b6001600160e01b03191681526107e29291906004016126eb565b600060405180830381600087803b1580156107fc57600080fd5b505af1158015610810573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261083891908101906125ad565b505050565b604051632f2e037160e11b81526001600160a01b0382811660048301526000917f000000000000000000000000000000000000000000000000000000000000000090911690635e5c06e29060240160206040518083038186803b1580156108a357600080fd5b505afa1580156108b7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108db919061227a565b92915050565b6108ec600233611eb9565b6109085760405162461bcd60e51b815260040161061390612949565b816001600160a01b031663a0b5ffb0735100bd31b822371108a0f63dcfb6594b9919eaf48360405160240161079891815260200190565b6060600061094d6002611ede565b905060008167ffffffffffffffff81111561096a5761096a612ad6565b604051908082528060200260200182016040528015610993578160200160208202803683370190505b50905060005b828110156109e8576109ac600282611ee8565b8282815181106109be576109be612ac0565b6001600160a01b0390921660209283029190910190910152806109e081612a79565b915050610999565b5092915050565b6109fa600233611eb9565b610a165760405162461bcd60e51b815260040161061390612949565b610a208685611ef4565b856001600160a01b031663a0b5ffb073aa9a289ce0565e4d6548e63a441e7c084e6b52f68787878787604051602401610a5d9594939291906128df565b60408051601f198184030181529181526020820180516001600160e01b0316638a2da17b60e01b1790525160e084901b6001600160e01b0319168152610aa79291906004016126eb565b600060405180830381600087803b158015610ac157600080fd5b505af1158015610ad5573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610afd91908101906125ad565b50505050505050565b6000610b1133611e5f565b905060005b82811015610d13576000856001600160a01b0316636352211e868685818110610b4157610b41612ac0565b905060200201356040518263ffffffff1660e01b8152600401610b6691815260200190565b60206040518083038186803b158015610b7e57600080fd5b505afa158015610b92573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bb6919061227a565b9050826001600160a01b0316816001600160a01b031614610c0e5760405162461bcd60e51b8152602060048201526012602482015271222325a2b0b9371d103737ba1037bbb732b960711b6044820152606401610613565b826001600160a01b031663a0b5ffb0878533898988818110610c3257610c32612ac0565b6040516001600160a01b0395861660248201529490931660448501525060209091020135606482015260840160408051601f198184030181529181526020820180516001600160e01b0316632142170760e11b1790525160e084901b6001600160e01b0319168152610ca89291906004016126eb565b600060405180830381600087803b158015610cc257600080fd5b505af1158015610cd6573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610cfe91908101906125ad565b50508080610d0b90612a79565b915050610b16565b5050505050565b6000610d2533611e5f565b905060005b84811015610f32576000868683818110610d4657610d46612ac0565b9050602002016020810190610d5b919061225d565b6040516370a0823160e01b81526001600160a01b03858116600483015291909116906370a082319060240160206040518083038186803b158015610d9e57600080fd5b505afa158015610db2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dd69190612673565b905080858584818110610deb57610deb612ac0565b905060200201351115610e105760405162461bcd60e51b815260040161061390612978565b826001600160a01b031663a0b5ffb0888885818110610e3157610e31612ac0565b9050602002016020810190610e46919061225d565b33888887818110610e5957610e59612ac0565b6040516001600160a01b039094166024850152602002919091013560448301525060640160408051601f198184030181529181526020820180516001600160e01b031663a9059cbb60e01b1790525160e084901b6001600160e01b0319168152610ec79291906004016126eb565b600060405180830381600087803b158015610ee157600080fd5b505af1158015610ef5573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610f1d91908101906125ad565b50508080610f2a90612a79565b915050610d2a565b505050505050565b6000546001600160a01b03163314610f645760405162461bcd60e51b81526004016106139061291d565b600555565b6000546001600160a01b03163314610f935760405162461bcd60e51b81526004016106139061291d565b6000546001600160a01b03828116911614801590610fb957506001600160a01b03811615155b6110055760405162461bcd60e51b815260206004820152601860248201527f44464b4561726e3a20696e76616c6964206164647265737300000000000000006044820152606401610613565b6001546001600160a01b0382811691161461107257600180546001600160a01b038381166001600160a01b03198316811790935560408051938452911660208301819052917fca4f2f25d0898edd99413412fb94012f9e54ec8142f9b093e7720646a95b16a991016106c6565b50565b6000546001600160a01b0316331461109f5760405162461bcd60e51b81526004016106139061291d565b600755565b6110af600233611eb9565b6110cb5760405162461bcd60e51b815260040161061390612949565b6040516370a0823160e01b81526001600160a01b0383166004820152600090733a4edcf3312f44ef027acfd8c21382a5259936e7906370a082319060240160206040518083038186803b15801561112157600080fd5b505afa158015611135573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111599190612673565b9050826001600160a01b031663a0b5ffb073aa9a289ce0565e4d6548e63a441e7c084e6b52f68460405160240161119291815260200190565b60408051601f198184030181529181526020820180516001600160e01b031663528be0a960e01b1790525160e084901b6001600160e01b03191681526111dc9291906004016126eb565b600060405180830381600087803b1580156111f657600080fd5b505af115801561120a573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261123291908101906125ad565b506040516370a0823160e01b81526001600160a01b0384166004820152600090733a4edcf3312f44ef027acfd8c21382a5259936e7906370a082319060240160206040518083038186803b15801561128957600080fd5b505afa15801561129d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112c19190612673565b90506112f184733a4edcf3312f44ef027acfd8c21382a5259936e76112e68585612a36565b600854600754611fc2565b50505050565b6000546001600160a01b031633146113215760405162461bcd60e51b81526004016106139061291d565b80156113325761083860028361205a565b61083860028361206f565b600061134833611e5f565b9050806001600160a01b0316318211156113745760405162461bcd60e51b815260040161061390612978565b6040516324a084df60e01b8152336004820152602481018390526001600160a01b038216906324a084df90604401600060405180830381600087803b1580156113bc57600080fd5b505af1158015610f32573d6000803e3d6000fd5b6113db600233611eb9565b6113f75760405162461bcd60e51b815260040161061390612949565b6114018685611ef4565b856001600160a01b031663a0b5ffb0735100bd31b822371108a0f63dcfb6594b9919eaf4878787878760405160240161143e9594939291906127b2565b60408051601f198184030181529181526020820180516001600160e01b031663f51333f560e01b1790525160e084901b6001600160e01b0319168152610aa79291906004016126eb565b6000546001600160a01b031633146114b25760405162461bcd60e51b81526004016106139061291d565b600955565b60006114c233611e5f565b6040516370a0823160e01b81526001600160a01b0382166004820152909150600090733a4edcf3312f44ef027acfd8c21382a5259936e7906370a082319060240160206040518083038186803b15801561151b57600080fd5b505afa15801561152f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115539190612673565b905060005b8581101561189a57600087878381811061157457611574612ac0565b9050602002016020810190611589919061225d565b6040516370a0823160e01b81526001600160a01b03868116600483015291909116906370a082319060240160206040518083038186803b1580156115cc57600080fd5b505afa1580156115e0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116049190612673565b90508086868481811061161957611619612ac0565b90506020020135111561163e5760405162461bcd60e51b815260040161061390612978565b836001600160a01b031663a0b5ffb089898581811061165f5761165f612ac0565b9050602002016020810190611674919061225d565b73e53bf78f8b99b6d356f93f41afb9951168cca2c689898781811061169b5761169b612ac0565b6040516001600160a01b039094166024850152602002919091013560448301525060640160408051601f198184030181529181526020820180516001600160e01b031663095ea7b360e01b1790525160e084901b6001600160e01b03191681526117099291906004016126eb565b600060405180830381600087803b15801561172357600080fd5b505af1158015611737573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261175f91908101906125ad565b506001600160a01b03841663a0b5ffb073e53bf78f8b99b6d356f93f41afb9951168cca2c66304b62f0d60e11b8b8b8781811061179e5761179e612ac0565b90506020020160208101906117b3919061225d565b8a8a888181106117c5576117c5612ac0565b6040516001600160a01b039094166024850152602002919091013560448301525060640160408051601f198184030181529181526020820180516001600160e01b03166001600160e01b03199485161790525160e085901b909216825261182f92916004016126eb565b600060405180830381600087803b15801561184957600080fd5b505af115801561185d573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261188591908101906125ad565b5050808061189290612a79565b915050611558565b506040516370a0823160e01b81526001600160a01b0383166004820152600090733a4edcf3312f44ef027acfd8c21382a5259936e7906370a082319060240160206040518083038186803b1580156118f157600080fd5b505afa158015611905573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119299190612673565b9050610afd83733a4edcf3312f44ef027acfd8c21382a5259936e761194e8585612a36565b600a54600954611fc2565b6000546001600160a01b031633146119835760405162461bcd60e51b81526004016106139061291d565b600655565b6000806119948361083d565b6001600160a01b0316141592915050565b6000546001600160a01b031633146119cf5760405162461bcd60e51b81526004016106139061291d565b600855565b6119df600233611eb9565b6119fb5760405162461bcd60e51b815260040161061390612949565b6040516370a0823160e01b81526001600160a01b03831660048201526000907372cb10c6bfa5624dd07ef608027e366bd690048f906370a082319060240160206040518083038186803b158015611a5157600080fd5b505afa158015611a65573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a899190612673565b9050826001600160a01b031663a0b5ffb0735100bd31b822371108a0f63dcfb6594b9919eaf484604051602401611ac291815260200190565b60408051601f198184030181529181526020820180516001600160e01b031663528be0a960e01b1790525160e084901b6001600160e01b0319168152611b0c9291906004016126eb565b600060405180830381600087803b158015611b2657600080fd5b505af1158015611b3a573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611b6291908101906125ad565b506040516370a0823160e01b81526001600160a01b03841660048201526000907372cb10c6bfa5624dd07ef608027e366bd690048f906370a082319060240160206040518083038186803b158015611bb957600080fd5b505afa158015611bcd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bf19190612673565b90506112f1847372cb10c6bfa5624dd07ef608027e366bd690048f611c168585612a36565b600654600554611fc2565b6000546001600160a01b03163314611c4b5760405162461bcd60e51b81526004016106139061291d565b600a55565b611c5b600233611eb9565b611c775760405162461bcd60e51b815260040161061390612949565b611c818584611ef4565b846001600160a01b031663a0b5ffb0735100bd31b822371108a0f63dcfb6594b9919eaf486868686604051602401611cbc949392919061277a565b60408051601f198184030181529181526020820180516001600160e01b031663c855dea360e01b1790525160e084901b6001600160e01b0319168152611d069291906004016126eb565b600060405180830381600087803b158015611d2057600080fd5b505af1158015611d34573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610f3291908101906125ad565b611d67600233611eb9565b611d835760405162461bcd60e51b815260040161061390612949565b6040516001600160a01b0383811660248301526044820183905284169063a0b5ffb0907338e76972bd173901b5e5e43ba5cb464293b80c319060640160408051601f198184030181529181526020820180516001600160e01b031663041bd1b960e21b1790525160e084901b6001600160e01b0319168152611e099291906004016126eb565b600060405180830381600087803b158015611e2357600080fd5b505af1158015611e37573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526112f191908101906125ad565b600080611e6b8361083d565b90506001600160a01b0381166108db5760405162461bcd60e51b8152602060048201526013602482015272111192d1585c9b8e881b9bc81858d8dbdd5b9d606a1b6044820152606401610613565b6001600160a01b038116600090815260018301602052604081205415155b9392505050565b60006108db825490565b6000611ed78383612084565b600060045482611f049190612a17565b905080836001600160a01b0316311015611f605760405162461bcd60e51b815260206004820152601e60248201527f4175746f51756573743a20696e737566666963656e742062616c616e636500006044820152606401610613565b6000546040516324a084df60e01b81526001600160a01b03918216600482015260248101839052908416906324a084df90604401600060405180830381600087803b158015611fae57600080fd5b505af1158015610afd573d6000803e3d6000fd5b818310610d13576000612710611fd88386612a17565b611fe291906129f5565b6000546040516001600160a01b0391821660248201526044810183905291925087169063a0b5ffb090879060640160408051601f198184030181529181526020820180516001600160e01b031663a9059cbb60e01b1790525160e084901b6001600160e01b0319168152610aa79291906004016126eb565b6000611ed7836001600160a01b0384166120ae565b6000611ed7836001600160a01b0384166120fd565b600082600001828154811061209b5761209b612ac0565b9060005260206000200154905092915050565b60008181526001830160205260408120546120f5575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556108db565b5060006108db565b600081815260018301602052604081205480156121e6576000612121600183612a36565b855490915060009061213590600190612a36565b905081811461219a57600086600001828154811061215557612155612ac0565b906000526020600020015490508087600001848154811061217857612178612ac0565b6000918252602080832090910192909255918252600188019052604090208390555b85548690806121ab576121ab612aaa565b6001900381819060005260206000200160009055905585600101600086815260200190815260200160002060009055600193505050506108db565b60009150506108db565b80356121fb81612aec565b919050565b60008083601f84011261221257600080fd5b50813567ffffffffffffffff81111561222a57600080fd5b6020830191508360208260051b850101111561224557600080fd5b9250929050565b803560ff811681146121fb57600080fd5b60006020828403121561226f57600080fd5b8135611ed781612aec565b60006020828403121561228c57600080fd5b8151611ed781612aec565b6000806000606084860312156122ac57600080fd5b83356122b781612aec565b925060208401356122c781612aec565b929592945050506040919091013590565b6000806000604084860312156122ed57600080fd5b83356122f881612aec565b9250602084013567ffffffffffffffff81111561231457600080fd5b61232086828701612200565b9497909650939450505050565b60008060008060006080868803121561234557600080fd5b853561235081612aec565b9450602086013567ffffffffffffffff81111561236c57600080fd5b61237888828901612200565b909550935050604086013561238c81612aec565b915061239a6060870161224c565b90509295509295909350565b60008060008060008060a087890312156123bf57600080fd5b86356123ca81612aec565b9550602087013567ffffffffffffffff808211156123e757600080fd5b6123f38a838b01612200565b90975095506040890135915061240882612aec565b81945061241760608a0161224c565b9350608089013591508082111561242d57600080fd5b508701610180818a03121561244157600080fd5b809150509295509295509295565b60008060008060008060a0878903121561246857600080fd5b863561247381612aec565b9550602087013567ffffffffffffffff81111561248f57600080fd5b61249b89828a01612200565b90965094505060408701356124af81612aec565b92506124bd6060880161224c565b91506124cb6080880161224c565b90509295509295509295565b600080604083850312156124ea57600080fd5b82356124f581612aec565b91506020830135801515811461250a57600080fd5b809150509250929050565b6000806040838503121561252857600080fd5b823561253381612aec565b946020939093013593505050565b6000806000806040858703121561255757600080fd5b843567ffffffffffffffff8082111561256f57600080fd5b61257b88838901612200565b9096509450602087013591508082111561259457600080fd5b506125a187828801612200565b95989497509550505050565b6000602082840312156125bf57600080fd5b815167ffffffffffffffff808211156125d757600080fd5b818401915084601f8301126125eb57600080fd5b8151818111156125fd576125fd612ad6565b604051601f8201601f19908116603f0116810190838211818310171561262557612625612ad6565b8160405282815287602084870101111561263e57600080fd5b61264f836020830160208801612a4d565b979650505050505050565b60006020828403121561266c57600080fd5b5035919050565b60006020828403121561268557600080fd5b5051919050565b81835260006001600160fb1b038311156126a557600080fd5b8260051b8083602087013760009401602001938452509192915050565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b60018060a01b03831681526040602082015260008251806040840152612718816060850160208701612a4d565b601f01601f1916919091016060019392505050565b6020808252825182820181905260009190848201906040850190845b8181101561276e5783516001600160a01b031683529284019291840191600101612749565b50909695505050505050565b60608152600061278e60608301868861268c565b6001600160a01b039490941660208301525060ff9190911660409091015292915050565b6080815260006127c660808301878961268c565b60018060a01b038616602084015260ff851660408401528281036060840152610180843582526020850135602083015260408501356040830152606085013560608301526080850135608083015260a085013560a083015261282b60c08601866129af565b8260c085015261283e83850182846126c2565b9250505061284f60e08601866129af565b83830360e08501526128628382846126c2565b925050506101006128748187016121f0565b6001600160a01b03169083015261012061288f8682016121f0565b6001600160a01b0316908301526101406128aa8682016121f0565b6001600160a01b0316908301526101606128c58682016121f0565b6001600160a01b0316920191909152979650505050505050565b6080815260006128f360808301878961268c565b6001600160a01b039590951660208301525060ff9283166040820152911660609091015292915050565b602080825260129082015271222325a2b0b9371d103737ba1030b236b4b760711b604082015260600190565b602080825260159082015274222325a2b0b9371d103737ba1037b832b930ba37b960591b604082015260600190565b6020808252601d908201527f44464b4561726e3a20696e73756666696369656e742062616c616e6365000000604082015260600190565b6000808335601e198436030181126129c657600080fd5b830160208101925035905067ffffffffffffffff8111156129e657600080fd5b80360383131561224557600080fd5b600082612a1257634e487b7160e01b600052601260045260246000fd5b500490565b6000816000190483118215151615612a3157612a31612a94565b500290565b600082821015612a4857612a48612a94565b500390565b60005b83811015612a68578181015183820152602001612a50565b838111156112f15750506000910152565b6000600019821415612a8d57612a8d612a94565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811461107257600080fdfea26469706673582212207b2f8acefa9da509333d684829ade241390134f2ea68b37cb031bb2688fbef3e64736f6c63430008070033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061025d5760003560e01c8063687cd9c111610146578063c8e40fbf116100c3578063f243fbff11610087578063f243fbff14610542578063f476f58614610555578063f567a69314610570578063f851a44014610579578063f9d2fc641461058c578063fbcbc0f11461059f57600080fd5b8063c8e40fbf146104cb578063d0d822e3146104ee578063d11d2c3114610501578063eba53f7d1461051c578063f05ba4fe1461052f57600080fd5b8063916e36071161010a578063916e360714610466578063b383544714610481578063b5a143d014610494578063b6644ab5146104a7578063b8de0547146104b057600080fd5b8063687cd9c1146103f35780636d44a3b21461041a5780637a5cadd01461042d57806388fd6cbd146104405780638f3c4e5b1461045357600080fd5b80632d6b7fcb116101df5780634dd18bf5116101a35780634dd18bf51461038d578063518911bc146103a0578063618f71ab146103b35780636374e4c5146103bc5780636773ed1e146103d757806367dfa3e7146103ea57600080fd5b80632d6b7fcb146103425780632eaa60531461034b5780633760da5a1461035e5780633a6cb96e146103715780633a9a57721461037a57600080fd5b80631cc1b0e1116102265780631cc1b0e1146102e15780631f77a06a146102f4578063267822471461030757806327a099d81461031a5780632c3f00c91461032f57600080fd5b8062c49388146102625780630e18b6811461029a5780630e197865146102a45780630f6672e5146102b7578063176285aa146102ca575b600080fd5b61027d7372cb10c6bfa5624dd07ef608027e366bd690048f81565b6040516001600160a01b0390911681526020015b60405180910390f35b6102a26105b2565b005b6102a26102b236600461265a565b6106d2565b6102a26102c5366004612515565b61073a565b6102d360075481565b604051908152602001610291565b61027d6102ef36600461225d565b61083d565b6102a2610302366004612515565b6108e1565b60015461027d906001600160a01b031681565b61032261093f565b604051610291919061272d565b6102a261033d36600461244f565b6109ef565b6102d360085481565b6102a26103593660046122d8565b610b06565b6102a261036c366004612541565b610d1a565b6102d360065481565b6102a261038836600461265a565b610f3a565b6102a261039b36600461225d565b610f69565b6102a26103ae36600461265a565b611075565b6102d3600a5481565b61027d73aa9a289ce0565e4d6548e63a441e7c084e6b52f681565b6102a26103e5366004612515565b6110a4565b6102d360045481565b61027d7f000000000000000000000000000000000000000000000000000000000000000081565b6102a26104283660046124d7565b6112f7565b6102a261043b36600461265a565b61133d565b6102a261044e3660046123a6565b6113d0565b6102a261046136600461265a565b611488565b61027d733a4edcf3312f44ef027acfd8c21382a5259936e781565b6102a261048f366004612541565b6114b7565b6102a26104a236600461265a565b611959565b6102d360095481565b61027d735100bd31b822371108a0f63dcfb6594b9919eaf481565b6104de6104d936600461225d565b611988565b6040519015158152602001610291565b6102a26104fc36600461265a565b6119a5565b61027d7338e76972bd173901b5e5e43ba5cb464293b80c3181565b6102a261052a366004612515565b6119d4565b6102a261053d36600461265a565b611c21565b6102a261055036600461232d565b611c50565b61027d73e53bf78f8b99b6d356f93f41afb9951168cca2c681565b6102d360055481565b60005461027d906001600160a01b031681565b6102a261059a366004612297565b611d5c565b61027d6105ad36600461225d565b611e5f565b6001546001600160a01b0316331480156105cb57503315155b61061c5760405162461bcd60e51b815260206004820152601a60248201527f44464b4561726e3a206e6f742070656e64696e672061646d696e00000000000060448201526064015b60405180910390fd5b60008054600180546001600160a01b038082166001600160a01b031980861682179096559490911690915560408051848152919092166020820181905292917ff9ffabca9c8276e99321725bcb43fb076a6c66a54b7f21c4e8146d8519b417dc910160405180910390a1600154604080516001600160a01b03928316815291831660208301527fca4f2f25d0898edd99413412fb94012f9e54ec8142f9b093e7720646a95b16a991015b60405180910390a15050565b6000546001600160a01b031633146106fc5760405162461bcd60e51b81526004016106139061291d565b600480549082905560408051838152602081018390527f95ed68237a6a1d4200ec409bb080ba6295f2a426346b3d475f4bf3a412cc30be91016106c6565b610745600233611eb9565b6107615760405162461bcd60e51b815260040161061390612949565b816001600160a01b031663a0b5ffb073aa9a289ce0565e4d6548e63a441e7c084e6b52f68360405160240161079891815260200190565b60408051601f198184030181529181526020820180516001600160e01b031663fe90ff7d60e01b1790525160e084901b6001600160e01b03191681526107e29291906004016126eb565b600060405180830381600087803b1580156107fc57600080fd5b505af1158015610810573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261083891908101906125ad565b505050565b604051632f2e037160e11b81526001600160a01b0382811660048301526000917f000000000000000000000000000000000000000000000000000000000000000090911690635e5c06e29060240160206040518083038186803b1580156108a357600080fd5b505afa1580156108b7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108db919061227a565b92915050565b6108ec600233611eb9565b6109085760405162461bcd60e51b815260040161061390612949565b816001600160a01b031663a0b5ffb0735100bd31b822371108a0f63dcfb6594b9919eaf48360405160240161079891815260200190565b6060600061094d6002611ede565b905060008167ffffffffffffffff81111561096a5761096a612ad6565b604051908082528060200260200182016040528015610993578160200160208202803683370190505b50905060005b828110156109e8576109ac600282611ee8565b8282815181106109be576109be612ac0565b6001600160a01b0390921660209283029190910190910152806109e081612a79565b915050610999565b5092915050565b6109fa600233611eb9565b610a165760405162461bcd60e51b815260040161061390612949565b610a208685611ef4565b856001600160a01b031663a0b5ffb073aa9a289ce0565e4d6548e63a441e7c084e6b52f68787878787604051602401610a5d9594939291906128df565b60408051601f198184030181529181526020820180516001600160e01b0316638a2da17b60e01b1790525160e084901b6001600160e01b0319168152610aa79291906004016126eb565b600060405180830381600087803b158015610ac157600080fd5b505af1158015610ad5573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610afd91908101906125ad565b50505050505050565b6000610b1133611e5f565b905060005b82811015610d13576000856001600160a01b0316636352211e868685818110610b4157610b41612ac0565b905060200201356040518263ffffffff1660e01b8152600401610b6691815260200190565b60206040518083038186803b158015610b7e57600080fd5b505afa158015610b92573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bb6919061227a565b9050826001600160a01b0316816001600160a01b031614610c0e5760405162461bcd60e51b8152602060048201526012602482015271222325a2b0b9371d103737ba1037bbb732b960711b6044820152606401610613565b826001600160a01b031663a0b5ffb0878533898988818110610c3257610c32612ac0565b6040516001600160a01b0395861660248201529490931660448501525060209091020135606482015260840160408051601f198184030181529181526020820180516001600160e01b0316632142170760e11b1790525160e084901b6001600160e01b0319168152610ca89291906004016126eb565b600060405180830381600087803b158015610cc257600080fd5b505af1158015610cd6573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610cfe91908101906125ad565b50508080610d0b90612a79565b915050610b16565b5050505050565b6000610d2533611e5f565b905060005b84811015610f32576000868683818110610d4657610d46612ac0565b9050602002016020810190610d5b919061225d565b6040516370a0823160e01b81526001600160a01b03858116600483015291909116906370a082319060240160206040518083038186803b158015610d9e57600080fd5b505afa158015610db2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dd69190612673565b905080858584818110610deb57610deb612ac0565b905060200201351115610e105760405162461bcd60e51b815260040161061390612978565b826001600160a01b031663a0b5ffb0888885818110610e3157610e31612ac0565b9050602002016020810190610e46919061225d565b33888887818110610e5957610e59612ac0565b6040516001600160a01b039094166024850152602002919091013560448301525060640160408051601f198184030181529181526020820180516001600160e01b031663a9059cbb60e01b1790525160e084901b6001600160e01b0319168152610ec79291906004016126eb565b600060405180830381600087803b158015610ee157600080fd5b505af1158015610ef5573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610f1d91908101906125ad565b50508080610f2a90612a79565b915050610d2a565b505050505050565b6000546001600160a01b03163314610f645760405162461bcd60e51b81526004016106139061291d565b600555565b6000546001600160a01b03163314610f935760405162461bcd60e51b81526004016106139061291d565b6000546001600160a01b03828116911614801590610fb957506001600160a01b03811615155b6110055760405162461bcd60e51b815260206004820152601860248201527f44464b4561726e3a20696e76616c6964206164647265737300000000000000006044820152606401610613565b6001546001600160a01b0382811691161461107257600180546001600160a01b038381166001600160a01b03198316811790935560408051938452911660208301819052917fca4f2f25d0898edd99413412fb94012f9e54ec8142f9b093e7720646a95b16a991016106c6565b50565b6000546001600160a01b0316331461109f5760405162461bcd60e51b81526004016106139061291d565b600755565b6110af600233611eb9565b6110cb5760405162461bcd60e51b815260040161061390612949565b6040516370a0823160e01b81526001600160a01b0383166004820152600090733a4edcf3312f44ef027acfd8c21382a5259936e7906370a082319060240160206040518083038186803b15801561112157600080fd5b505afa158015611135573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111599190612673565b9050826001600160a01b031663a0b5ffb073aa9a289ce0565e4d6548e63a441e7c084e6b52f68460405160240161119291815260200190565b60408051601f198184030181529181526020820180516001600160e01b031663528be0a960e01b1790525160e084901b6001600160e01b03191681526111dc9291906004016126eb565b600060405180830381600087803b1580156111f657600080fd5b505af115801561120a573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261123291908101906125ad565b506040516370a0823160e01b81526001600160a01b0384166004820152600090733a4edcf3312f44ef027acfd8c21382a5259936e7906370a082319060240160206040518083038186803b15801561128957600080fd5b505afa15801561129d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112c19190612673565b90506112f184733a4edcf3312f44ef027acfd8c21382a5259936e76112e68585612a36565b600854600754611fc2565b50505050565b6000546001600160a01b031633146113215760405162461bcd60e51b81526004016106139061291d565b80156113325761083860028361205a565b61083860028361206f565b600061134833611e5f565b9050806001600160a01b0316318211156113745760405162461bcd60e51b815260040161061390612978565b6040516324a084df60e01b8152336004820152602481018390526001600160a01b038216906324a084df90604401600060405180830381600087803b1580156113bc57600080fd5b505af1158015610f32573d6000803e3d6000fd5b6113db600233611eb9565b6113f75760405162461bcd60e51b815260040161061390612949565b6114018685611ef4565b856001600160a01b031663a0b5ffb0735100bd31b822371108a0f63dcfb6594b9919eaf4878787878760405160240161143e9594939291906127b2565b60408051601f198184030181529181526020820180516001600160e01b031663f51333f560e01b1790525160e084901b6001600160e01b0319168152610aa79291906004016126eb565b6000546001600160a01b031633146114b25760405162461bcd60e51b81526004016106139061291d565b600955565b60006114c233611e5f565b6040516370a0823160e01b81526001600160a01b0382166004820152909150600090733a4edcf3312f44ef027acfd8c21382a5259936e7906370a082319060240160206040518083038186803b15801561151b57600080fd5b505afa15801561152f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115539190612673565b905060005b8581101561189a57600087878381811061157457611574612ac0565b9050602002016020810190611589919061225d565b6040516370a0823160e01b81526001600160a01b03868116600483015291909116906370a082319060240160206040518083038186803b1580156115cc57600080fd5b505afa1580156115e0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116049190612673565b90508086868481811061161957611619612ac0565b90506020020135111561163e5760405162461bcd60e51b815260040161061390612978565b836001600160a01b031663a0b5ffb089898581811061165f5761165f612ac0565b9050602002016020810190611674919061225d565b73e53bf78f8b99b6d356f93f41afb9951168cca2c689898781811061169b5761169b612ac0565b6040516001600160a01b039094166024850152602002919091013560448301525060640160408051601f198184030181529181526020820180516001600160e01b031663095ea7b360e01b1790525160e084901b6001600160e01b03191681526117099291906004016126eb565b600060405180830381600087803b15801561172357600080fd5b505af1158015611737573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261175f91908101906125ad565b506001600160a01b03841663a0b5ffb073e53bf78f8b99b6d356f93f41afb9951168cca2c66304b62f0d60e11b8b8b8781811061179e5761179e612ac0565b90506020020160208101906117b3919061225d565b8a8a888181106117c5576117c5612ac0565b6040516001600160a01b039094166024850152602002919091013560448301525060640160408051601f198184030181529181526020820180516001600160e01b03166001600160e01b03199485161790525160e085901b909216825261182f92916004016126eb565b600060405180830381600087803b15801561184957600080fd5b505af115801561185d573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261188591908101906125ad565b5050808061189290612a79565b915050611558565b506040516370a0823160e01b81526001600160a01b0383166004820152600090733a4edcf3312f44ef027acfd8c21382a5259936e7906370a082319060240160206040518083038186803b1580156118f157600080fd5b505afa158015611905573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119299190612673565b9050610afd83733a4edcf3312f44ef027acfd8c21382a5259936e761194e8585612a36565b600a54600954611fc2565b6000546001600160a01b031633146119835760405162461bcd60e51b81526004016106139061291d565b600655565b6000806119948361083d565b6001600160a01b0316141592915050565b6000546001600160a01b031633146119cf5760405162461bcd60e51b81526004016106139061291d565b600855565b6119df600233611eb9565b6119fb5760405162461bcd60e51b815260040161061390612949565b6040516370a0823160e01b81526001600160a01b03831660048201526000907372cb10c6bfa5624dd07ef608027e366bd690048f906370a082319060240160206040518083038186803b158015611a5157600080fd5b505afa158015611a65573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a899190612673565b9050826001600160a01b031663a0b5ffb0735100bd31b822371108a0f63dcfb6594b9919eaf484604051602401611ac291815260200190565b60408051601f198184030181529181526020820180516001600160e01b031663528be0a960e01b1790525160e084901b6001600160e01b0319168152611b0c9291906004016126eb565b600060405180830381600087803b158015611b2657600080fd5b505af1158015611b3a573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611b6291908101906125ad565b506040516370a0823160e01b81526001600160a01b03841660048201526000907372cb10c6bfa5624dd07ef608027e366bd690048f906370a082319060240160206040518083038186803b158015611bb957600080fd5b505afa158015611bcd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bf19190612673565b90506112f1847372cb10c6bfa5624dd07ef608027e366bd690048f611c168585612a36565b600654600554611fc2565b6000546001600160a01b03163314611c4b5760405162461bcd60e51b81526004016106139061291d565b600a55565b611c5b600233611eb9565b611c775760405162461bcd60e51b815260040161061390612949565b611c818584611ef4565b846001600160a01b031663a0b5ffb0735100bd31b822371108a0f63dcfb6594b9919eaf486868686604051602401611cbc949392919061277a565b60408051601f198184030181529181526020820180516001600160e01b031663c855dea360e01b1790525160e084901b6001600160e01b0319168152611d069291906004016126eb565b600060405180830381600087803b158015611d2057600080fd5b505af1158015611d34573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610f3291908101906125ad565b611d67600233611eb9565b611d835760405162461bcd60e51b815260040161061390612949565b6040516001600160a01b0383811660248301526044820183905284169063a0b5ffb0907338e76972bd173901b5e5e43ba5cb464293b80c319060640160408051601f198184030181529181526020820180516001600160e01b031663041bd1b960e21b1790525160e084901b6001600160e01b0319168152611e099291906004016126eb565b600060405180830381600087803b158015611e2357600080fd5b505af1158015611e37573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526112f191908101906125ad565b600080611e6b8361083d565b90506001600160a01b0381166108db5760405162461bcd60e51b8152602060048201526013602482015272111192d1585c9b8e881b9bc81858d8dbdd5b9d606a1b6044820152606401610613565b6001600160a01b038116600090815260018301602052604081205415155b9392505050565b60006108db825490565b6000611ed78383612084565b600060045482611f049190612a17565b905080836001600160a01b0316311015611f605760405162461bcd60e51b815260206004820152601e60248201527f4175746f51756573743a20696e737566666963656e742062616c616e636500006044820152606401610613565b6000546040516324a084df60e01b81526001600160a01b03918216600482015260248101839052908416906324a084df90604401600060405180830381600087803b158015611fae57600080fd5b505af1158015610afd573d6000803e3d6000fd5b818310610d13576000612710611fd88386612a17565b611fe291906129f5565b6000546040516001600160a01b0391821660248201526044810183905291925087169063a0b5ffb090879060640160408051601f198184030181529181526020820180516001600160e01b031663a9059cbb60e01b1790525160e084901b6001600160e01b0319168152610aa79291906004016126eb565b6000611ed7836001600160a01b0384166120ae565b6000611ed7836001600160a01b0384166120fd565b600082600001828154811061209b5761209b612ac0565b9060005260206000200154905092915050565b60008181526001830160205260408120546120f5575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556108db565b5060006108db565b600081815260018301602052604081205480156121e6576000612121600183612a36565b855490915060009061213590600190612a36565b905081811461219a57600086600001828154811061215557612155612ac0565b906000526020600020015490508087600001848154811061217857612178612ac0565b6000918252602080832090910192909255918252600188019052604090208390555b85548690806121ab576121ab612aaa565b6001900381819060005260206000200160009055905585600101600086815260200190815260200160002060009055600193505050506108db565b60009150506108db565b80356121fb81612aec565b919050565b60008083601f84011261221257600080fd5b50813567ffffffffffffffff81111561222a57600080fd5b6020830191508360208260051b850101111561224557600080fd5b9250929050565b803560ff811681146121fb57600080fd5b60006020828403121561226f57600080fd5b8135611ed781612aec565b60006020828403121561228c57600080fd5b8151611ed781612aec565b6000806000606084860312156122ac57600080fd5b83356122b781612aec565b925060208401356122c781612aec565b929592945050506040919091013590565b6000806000604084860312156122ed57600080fd5b83356122f881612aec565b9250602084013567ffffffffffffffff81111561231457600080fd5b61232086828701612200565b9497909650939450505050565b60008060008060006080868803121561234557600080fd5b853561235081612aec565b9450602086013567ffffffffffffffff81111561236c57600080fd5b61237888828901612200565b909550935050604086013561238c81612aec565b915061239a6060870161224c565b90509295509295909350565b60008060008060008060a087890312156123bf57600080fd5b86356123ca81612aec565b9550602087013567ffffffffffffffff808211156123e757600080fd5b6123f38a838b01612200565b90975095506040890135915061240882612aec565b81945061241760608a0161224c565b9350608089013591508082111561242d57600080fd5b508701610180818a03121561244157600080fd5b809150509295509295509295565b60008060008060008060a0878903121561246857600080fd5b863561247381612aec565b9550602087013567ffffffffffffffff81111561248f57600080fd5b61249b89828a01612200565b90965094505060408701356124af81612aec565b92506124bd6060880161224c565b91506124cb6080880161224c565b90509295509295509295565b600080604083850312156124ea57600080fd5b82356124f581612aec565b91506020830135801515811461250a57600080fd5b809150509250929050565b6000806040838503121561252857600080fd5b823561253381612aec565b946020939093013593505050565b6000806000806040858703121561255757600080fd5b843567ffffffffffffffff8082111561256f57600080fd5b61257b88838901612200565b9096509450602087013591508082111561259457600080fd5b506125a187828801612200565b95989497509550505050565b6000602082840312156125bf57600080fd5b815167ffffffffffffffff808211156125d757600080fd5b818401915084601f8301126125eb57600080fd5b8151818111156125fd576125fd612ad6565b604051601f8201601f19908116603f0116810190838211818310171561262557612625612ad6565b8160405282815287602084870101111561263e57600080fd5b61264f836020830160208801612a4d565b979650505050505050565b60006020828403121561266c57600080fd5b5035919050565b60006020828403121561268557600080fd5b5051919050565b81835260006001600160fb1b038311156126a557600080fd5b8260051b8083602087013760009401602001938452509192915050565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b60018060a01b03831681526040602082015260008251806040840152612718816060850160208701612a4d565b601f01601f1916919091016060019392505050565b6020808252825182820181905260009190848201906040850190845b8181101561276e5783516001600160a01b031683529284019291840191600101612749565b50909695505050505050565b60608152600061278e60608301868861268c565b6001600160a01b039490941660208301525060ff9190911660409091015292915050565b6080815260006127c660808301878961268c565b60018060a01b038616602084015260ff851660408401528281036060840152610180843582526020850135602083015260408501356040830152606085013560608301526080850135608083015260a085013560a083015261282b60c08601866129af565b8260c085015261283e83850182846126c2565b9250505061284f60e08601866129af565b83830360e08501526128628382846126c2565b925050506101006128748187016121f0565b6001600160a01b03169083015261012061288f8682016121f0565b6001600160a01b0316908301526101406128aa8682016121f0565b6001600160a01b0316908301526101606128c58682016121f0565b6001600160a01b0316920191909152979650505050505050565b6080815260006128f360808301878961268c565b6001600160a01b039590951660208301525060ff9283166040820152911660609091015292915050565b602080825260129082015271222325a2b0b9371d103737ba1030b236b4b760711b604082015260600190565b602080825260159082015274222325a2b0b9371d103737ba1037b832b930ba37b960591b604082015260600190565b6020808252601d908201527f44464b4561726e3a20696e73756666696369656e742062616c616e6365000000604082015260600190565b6000808335601e198436030181126129c657600080fd5b830160208101925035905067ffffffffffffffff8111156129e657600080fd5b80360383131561224557600080fd5b600082612a1257634e487b7160e01b600052601260045260246000fd5b500490565b6000816000190483118215151615612a3157612a31612a94565b500290565b600082821015612a4857612a48612a94565b500390565b60005b83811015612a68578181015183820152602001612a50565b838111156112f15750506000910152565b6000600019821415612a8d57612a8d612a94565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811461107257600080fdfea26469706673582212207b2f8acefa9da509333d684829ade241390134f2ea68b37cb031bb2688fbef3e64736f6c63430008070033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 8108,
        "contract": "contracts/AutoQuest.sol:AutoQuest",
        "label": "admin",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 8110,
        "contract": "contracts/AutoQuest.sol:AutoQuest",
        "label": "pendingAdmin",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 7394,
        "contract": "contracts/AutoQuest.sol:AutoQuest",
        "label": "operators",
        "offset": 0,
        "slot": "2",
        "type": "t_struct(AddressSet)5913_storage"
      },
      {
        "astId": 7396,
        "contract": "contracts/AutoQuest.sol:AutoQuest",
        "label": "questFee",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 7398,
        "contract": "contracts/AutoQuest.sol:AutoQuest",
        "label": "miningJewelFeeRate",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 7400,
        "contract": "contracts/AutoQuest.sol:AutoQuest",
        "label": "miningJewelFeeThreshold",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 7402,
        "contract": "contracts/AutoQuest.sol:AutoQuest",
        "label": "trainingQuestFeeRate",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 7404,
        "contract": "contracts/AutoQuest.sol:AutoQuest",
        "label": "trainingQuestFeeThreshold",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 7406,
        "contract": "contracts/AutoQuest.sol:AutoQuest",
        "label": "sellItemFeeRate",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 7408,
        "contract": "contracts/AutoQuest.sol:AutoQuest",
        "label": "sellItemFeeThreshold",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(AddressSet)5913_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "members": [
          {
            "astId": 5912,
            "contract": "contracts/AutoQuest.sol:AutoQuest",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)5612_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Set)5612_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 5607,
            "contract": "contracts/AutoQuest.sol:AutoQuest",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 5611,
            "contract": "contracts/AutoQuest.sol:AutoQuest",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}
